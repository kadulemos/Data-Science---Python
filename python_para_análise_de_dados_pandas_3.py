# -*- coding: utf-8 -*-
"""Python_para_Análise_de_Dados_PANDAS_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18NzBmphSq9DPdoCUxV0b-Q8g0jg-zGly
"""

import pandas as pd

arquivo = '/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/kc_house_data.csv'
dataset = pd.read_csv(arquivo, sep=',', header=0)

dataset.head()

"""<h2>Extraindo Insight</h2>

* Vamos trabalhar com um tipo de gráfico muito interessante.
* Os gráficos do tipo BoxPlot são excelentes ferramentas de análise de dados, principalmente para identificar *outliers*.
"""

# Importando matplotlib
import matplotlib

# Commented out IPython magic to ensure Python compatibility.
# Plota gráfico do tipo Boxplot da coluna bedrooms
# Esse gráfico é muito rico e é possível visualizar Outliers
# %matplotlib inline
matplotlib.style.use('ggplot')
dataset.boxplot(column='bedrooms')

# Visualizando os estilos de layout disponíveis
matplotlib.style.available

# Commented out IPython magic to ensure Python compatibility.
# Plota BoxPlot da coluna 'price' por número de quartos
# %matplotlib inline
dataset.boxplot(column='price', by='bedrooms')

"""**Correlação**"""

# Imprime a correlação de todas as colunas do dataframe (person)
dataset.corr()

# Imprime a correlação de SPEARMAN (esta leva em consideração a correção positiva e negativa)
dataset.corr('spearman')

# Imprime a correlação de algumas colunas
dataset[['bedrooms', 'bathrooms', 'sqft_living', 'floors', 'waterfront','grade','price']].corr()

# Commented out IPython magic to ensure Python compatibility.
# Plotando a correlação de algumas colunas
# %matplotlib inline
dataset[['sqft_living', 'waterfront', 'grade', 'price']].corr().plot()

"""<h2>Tabelas Pivot</h2>

* Tabelas Pivot são úteis para fazer agrupamento nos dados.
"""

# Conta a quatidade de imóveis agrupados pelas colunas waterfrotn e floors.
# O parâmetro index informa as colunas que serão usadas para agregação.
# O parâmetro aggfunc é usada para definir a função de agregação, que poderia ser uma média por exemplo.
# O parâmetro margins = True calcula a quantidade total no final da tabela.

# Muito interessante a performance dessa operação.

dataset.pivot_table('id', index=['waterfront', 'floors'], aggfunc='count', margins=True)

"""**Crosstab**"""

# Crosstab ou tabulação Cruzada.
# Essa funcionalidade cruza valores das variáveis.
# Nesse exemplo podemos ver qual a distribuição dos imóveis por número de quartos com relação a sua condição.
# Podemos ver que imóveis com 3 quartos estão mais na condição 5

pd.crosstab(dataset['bedrooms'], dataset['condition'])

# Plota a tabulação Cruzada
# Usamos o método plot com um gráfico de barras

table = pd.crosstab(dataset['bedrooms'], dataset['condition'])
table.plot(kind='bar', width=1.0, color=['red', 'yellow', 'orange', 'blue', 'green'], title = 'Condition by Bedrooms', grid=False)

"""<h2>Trabalhando com Excel</h2>

* Com o Pandas podemos trabalhar com o Excel.
* Isso é muito bom, pois, sabemos que temos muita informação em planilhas excel.
* Diante disso você pode usar o pandas para manipular planilhas do excel e até mesmo gerar novas planilhas a partir de outros dados.
"""

# Lendo uma planilha do excel no Pandas
dataframe_excel = pd.read_excel('/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/Controle-de-Atividades-2.0.xlsx', sheet_name=0, header=1)

dataframe_excel.head()

# Lendo o arquivo indexando pela coluna 'Estado Atual'

file = '/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/Controle-de-Atividades-2.0.xlsx'
dataframe_excel = pd.read_excel(file, sheet_name=0, header=1, index_col=3)

dataframe_excel.head()

# Ordenando o dataframe pela coluna de índice
dataframe_excel.sort_index().head()

"""<h2>Gerando Planilhas a partir de Dataframes</h2>"""

# Vou usar o dataset de imóveis para gerar uma planilha
dataset.head()

# Gerando uma planilha com algumas colunas
colunas = ['id', 'price', 'bedrooms', 'bathrooms', 'sqft_living', 'floors', 'waterfront']
dataset[colunas].head()

# Escrevendo no disco a planilha sem o valor do índice
dataset[colunas].to_excel('/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/planilha_pandas_aula15.xls')

