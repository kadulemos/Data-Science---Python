# -*- coding: utf-8 -*-
"""Tuplas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LMV8u_Fd80x-gNEEsHsbYawZPab3xvV-

<h2> Trabalhando com Tuplas </h2>
"""

# Tuplas usam paratênses como sintaxe
tupla1 = ()

tupla1

tupla1 = ('Ferrari','Onça', 17.900,500)

tupla1

# Python 3 aceita criação de uma tupla sem usar a vírgula
tupla = (10)

tupla

# Imprimindo elementos da tupla a partir das posições
tupla1[0], tupla1[2], tupla1[3]

# Tuplas são imutáveis!! (importante)
tupla1[0] = 'Porshe'

# Criação de tuplas aninhadas
tupla_aninhada = (1,2,3,(23,43,78))

tupla_aninhada[3]

# Acessando o primeiro valor da lista aninhada
tupla_aninhada[3][0]



"""<h2> Operações Básicas </h2>"""

# Operação de Repetição e criação de nova tupla
tupla2 = tupla1 * 3

tupla2

# Concatena Tuplas
(1,2,3) + (4,5,6)

# Checa se o elemento pertence a tupla
'elefante' in tupla1

"""<h2> Slicing </h2>"""

# Percorre a tupla do elemento na posição 2 em diante
tupla1[2:]

# Percorre a tupla do elemento na posição 1 até o elemento na posição 3(não o incluindo)
tupla1 [1:3]

"""<h2> Métodos Disponíveis </h2>"""

# Conta a frequência de um elemento
tupla1.count('Onça')

tupla1.count('elefante') # quando não há o elemento na tupla retorna valor zero (0)

# Retorna a posição do elemento
tupla1.index(17.9)

# Retorna o tamanho da tupla
len(tupla1)

# Retorna o maior valor da tupla
tupla2 = (2,3,4,128787,90.0)
max(tupla2)

# Retorna o menor valor da tupla
min(tupla2)

# Criando uma lista
lista = [1,3,4,3,89.9,765,'Minerando Dados','DataScience']

lista

# Converte uma lista em tupla
tupla3 = tuple(lista)

tupla3

type(tupla3)

# Convertendo uma tupla em lista
lista1 = list(tupla3)

lista1