# -*- coding: utf-8 -*-
"""Python_para_Análise_de_Dados_PANDAS_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LVujCYnyiXLeQGUWwo9fM9l5qvrDahpk
"""

import pandas as pd

dataset = pd.read_csv('/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/kc_house_data.csv', sep=',')

"""**Percorrendo linhas de um Dataframe Pandas**

* Método *iterows()* percorre por todas as linhas de um dataframe.
* Esse método retorna um objeto *iterator* que contém o índice de cada linha e em cada linha um dado do tipo série.
"""

type(dataset.iterrows())

# Imprime a primeira linha do objeto iterator
next(dataset.iterrows())

# Percorrendo o dataframe e imprimindo o índice e cada linha
for indice, linha in dataset.head(10).iterrows():
  print(indice,linha)

# Percorrendo o dataframe e acessando colunas nomes
for indice, linha in dataset.head(10).iterrows():
  print(indice, linha['bedrooms'], linha['floors'], linha['price'])

"""**Atualizando Dataframe ao percorrer linha a linha**"""

# Imprime os 5 primeiros valores de preços antes da atualização
dataset.price.head()

# Percorrendo e atualizando linhas de um dataframe
# Atualiza o valor da coluna PRICE multiplicando seu valor por 2
# É preciso usar o método at()
for indice, linha in dataset.iterrows():
  dataset.at[indice, 'price'] = linha['price'] = 2

# Imprimindo a coluna 'price' para verificar o valor atualizado
dataset.price.head()

"""**Percorrendo um dataframe com o método intertuples()**

* Retorna as linhas e índice em formato de tuplas
*Costuma ser mais rápido que o *iterrows()*
"""

# Percorrendo o dataframe usando itertuples()
for linha in dataset.head().itertuples():
  print(linha)

# Imprime linhas chamando as coluna por nome
for linha in dataset.head().itertuples():
  print(linha.id, linha.bedrooms, linha.bathrooms)

"""<h2>Missing Values</h2>

* **Missing Values** são valores faltantes em colunas, esses podem ser oriundos de falhas em cargas de dados, falhas em crawlers ou até mesmo corrupção de dados.
* Missing Values podem ser um problema em várias situações, como por exemplo, algoritmos de machine learning que não trabalham bem com dados faltantes.
* Estes também podem atrapalhar resultados de análises.
* Vamos aprender como encontrar missing values na base de dados e como manipuar esses valores.
"""

arquivo = '/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/kc_house_data.csv'
dataset = pd.read_csv(arquivo, sep=',', header=0)

# Consultando linhas com valores faltantes
dataset.isnull().sum()

# Com este comando removemos todas as linhas com pelo menos um registro faltante em algum atributo
dataset.dropna(inplace=True)

# Consultando linhas para verificar a remoção das linhas faltantes
dataset.isnull().sum()

# É possível ainda, remover somente as linhas que estejam com valores faltantes em todas as colunas, veja:
dataset.dropna(how='all', inplace=True)

# Verificando as linhas excluídas com todos os valores faltantes nas colunas
# Nesse caso não houve a exclusão, pois o critério não foi atendido
dataset.isnull().sum()

# Preenche com a média dos valores da coluna 'floors' os values null
dataset['floors'].fillna(dataset['floors'].mean(), inplace=True)

# Verificando o preenchimento no dataset
dataset.isnull().sum()

# Preenchendo com 1(ou outra constante) os valores null da coluna 'bedrooms'
dataset['bedrooms'].fillna(1, inplace=True)

# Verificando o preenchimento no dataset
dataset.isnull().sum()

"""<h2>Visualização de dados</h2>"""

import matplotlib as plt

# Commented out IPython magic to ensure Python compatibility.
# Plota em um gráfico de barras o preço dos imóveis
# %matplotlib inline
dataset['price'].plot()

# Plota em gráfico de dispersão o preço e o número de qaurtos de imóveis
dataset.plot(x='bedrooms', y='price', kind='scatter', title='Bedrooms x Price', color='r')

# Plota em gráfico de dispersão o preço e o número de banheiros
dataset.plot(x='bathrooms', y='price', kind='scatter', color='y')

"""<h2>Visualizando Dados e Informações Estatísticas</h2>"""

# Commented out IPython magic to ensure Python compatibility.
# Plota um Histograma com a coluna Price com 30 bins na cor vermelha
# %matplotlib inline
dataset['price'].hist(bins=30, color='red')

# Commented out IPython magic to ensure Python compatibility.
# Plota histogramas das colunas Bedrooms e Bathrooms lado a lado na cor verde
# %matplotlib inline
dataset[['bedrooms', 'bathrooms']].hist(bins=30, alpha=0.5, color='Green')

"""**Estatística Descritiva**"""

# Imprime o valor médio da coluna bedrroms
dataset['bedrooms'].mean()

# Imprime o valor máximo da coluna bedrooms
dataset['bedrooms'].max()

# Imprime o valor mínimo da coluna bedrooms
dataset['bedrooms'].min()

# Imrpime o valor que define se os dados são simétricos ou não
dataset['bedrooms'].skew()

# Esse método retorna o valor de simetria de cada coluna do dataset.
# Um valor zero indica uma distribuição simétrica.
# Um valor maior que zero ou menor indica uma distribuição assimétrica.
# Valores acima de zero, podemos dizer que existe uma asssimetria positiva.
# Valores abaixo de zero uma assimetria negativa.
# Isso quer dizer que valores acima do zero indicam que existem mais valores acima da média.
# Valores abaixo de zero significa que contém mais valores abaixo da média.

dataset.skew()

