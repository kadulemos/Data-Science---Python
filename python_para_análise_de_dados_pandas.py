# -*- coding: utf-8 -*-
"""Python_para_Análise_de_Dados_PANDAS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cuh_IDhZ0lW4ykmNOAdKH68Tk9HyYA5x

<h2>Python para Análise de Dados - Pandas</h2>

Iremos trabalhar com base de imóveis que obtive no site Kaggle.
"""

# Importando o Pandas.
import pandas as pd

# Lendo uma base de dados no formato .csv
# O parâmetro sep é usado para definir qual o separador entre os dados.
# O parãmetro header informa qual linha está minhas colunas ou se elas não existem
# Se não existem colunas (header = none) o pandas dará um número para cada atributo da base
arquivo = '/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/kc_house_data.csv'

dataset = pd.read_csv (arquivo, sep=',', header=0)

# Imprimindo o tipo da variável dataset
# Dataframe é uma estrutura de dados onde Linhas podem ter colunas de diferentes tipos
type(dataset)

# Método head() imprime as 5 linhas iniciais do frame
dataset.head()

# O parâmetro index_col informa a coluna na qual o dataframe será indexado
dataset = pd.read_csv(arquivo, sep=',', index_col='date')

dataset.head()

dataset = pd.read_csv(arquivo, sep=',', usecols=['id', 'date', 'price', 'bedrooms'])

# Método head() imprime as 5 linhas iniciais do dataframe
dataset.head()

# Imprimindo as 100 primeiras linhas do dataframe
dataset.head(100)

# Atributo columns retorna o nome das colunas do dataframe
dataset.columns

# Método count() retorna a quantidade de linhas de todas as colunas
dataset.count()

# Método describe() exibe informações estatísticas da base de dados
# Várias informações como desvio padrão, média, valor mínimo e valor máximo de colunas
dataset.describe()

# Imprime as 5 últimas linhas
dataset.tail()

# Imprime uma amostra aleatória do dataset
dataset.sample(5)

# Retorna em formato de tupla a quantidade de linhas e colunas do dataset
dataset.shape

# Imprime informações sobre colunas e uso de memória
dataset.info()

"""<h2>Analisando um Dataframe com profiling</h2>

Instalando o Pandas Profiling
"""

!pip install -U pandas-profiling

import pandas_profiling

df = pd.read_csv(arquivo, sep=',', header=0)

# Criando o profile sem a referência (minimal = True) - a referência entre as varáveis do dataset demanda muita memória da máquina
pandas_profiling.ProfileReport(df, minimal=True)

# Criando o profile em html
profile = pandas_profiling.ProfileReport(df, title='Profiling House',html={'style':{'full_width':True}})

profile

# Escrevendo o relatório para o drive
profile.to_file(output_file='/content/drive/My Drive/Colab Notebooks/ Data Science - Minerando Dados/datasets/report_house_data.html')

"""<h2>Trabalhando com Grandes Arquivos</h2>

* Quando estamos trabalhanco com **Grandes Arquivos** temos um desafio que é gerenciar a memória.
* As vezes precisamos manipulçar uma base de dados muito grande e por isso precisamos trabalhar com arquivos de forma diferente.
* Uma forma é ler esses arquivos de forma limitada para não consumir toda a **memória** do servidor.
"""

# Lendo as 5 primeiras linha do arquivo
dataset = pd.read_csv(arquivo, sep=',', nrows=5)

dataset

# O parâmetro chunksize define em quantas linhas cada bloco irá conter
chunk = pd.read_csv(arquivo, chunksize=10000)

type(chunk)

# Imprimindo tamanho das partes do arquivo chunk
for parte in chunk:
  print(len(parte))

# Interesse sobre cada parte do dataframe em seguida adicione o valor processado a uma nova coluna dataset
lista = []
for parte in chunk:
  lista.append(parte['bedrooms']*2)

dataset['bedrooms_size'] = pd.concat(lista)

dataset

